// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
> 1 | type B { name: String! }
    |      ^ B must have exactly one non-nullable unique identifier. Accepted name(s): id; Accepted type(s): ID.
`;

exports[` 2`] = `
> 1 | type B { id: ID! _id: String! }
    |      ^ B must have exactly one non-nullable unique identifier. Accepted name(s): id, _id; Accepted type(s): ID, String.
`;

exports[` 3`] = `
> 1 | type B { id: String! } type B1 { id: [String] } type B2 { id: [String!] } type B3 { id: [String]! } type B4 { id: [String!]! }
    |                             ^^ B1 must have exactly one non-nullable unique identifier. Accepted name(s): id; Accepted type(s): String.
`;

exports[` 4`] = `
> 1 | type B { id: String! } type B1 { id: [String] } type B2 { id: [String!] } type B3 { id: [String]! } type B4 { id: [String!]! }
    |                                                      ^^ B2 must have exactly one non-nullable unique identifier. Accepted name(s): id; Accepted type(s): String.
`;

exports[` 5`] = `
> 1 | type B { id: String! } type B1 { id: [String] } type B2 { id: [String!] } type B3 { id: [String]! } type B4 { id: [String!]! }
    |                                                                                ^^ B3 must have exactly one non-nullable unique identifier. Accepted name(s): id; Accepted type(s): String.
`;

exports[` 6`] = `
> 1 | type B { id: String! } type B1 { id: [String] } type B2 { id: [String!] } type B3 { id: [String]! } type B4 { id: [String!]! }
    |                                                                                                          ^^ B4 must have exactly one non-nullable unique identifier. Accepted name(s): id; Accepted type(s): String.
`;

exports[` 7`] = `
> 1 | type B { id: ID! } type Bresult { key: String! } type BPayload { bool: Boolean! } type BPagination { num: Int! }
    |                         ^^^^^^^ Bresult must have exactly one non-nullable unique identifier. Accepted name(s): id; Accepted type(s): ID.
`;

exports[` 8`] = `
> 1 | type B { id: ID! } type Bresult { key: String! } type BPayload { bool: Boolean! } type BPagination { num: Int! }
    |                                                                                        ^^^^^^^^^^^ BPagination must have exactly one non-nullable unique identifier. Accepted name(s): id; Accepted type(s): ID.
`;

exports[` 9`] = `
> 1 | type B { id: ID! } type BError { message: String! }
    |                         ^^^^^^ BError must have exactly one non-nullable unique identifier. Accepted name(s): id; Accepted type(s): ID.
`;
